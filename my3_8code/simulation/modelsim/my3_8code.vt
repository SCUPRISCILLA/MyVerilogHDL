// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/09/2018 14:37:37"
                                                                                
// Verilog Test Bench template for design : my3_8code
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module my3_8code_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg a;
reg b;
reg c;
// wires                                               
wire [7:0]  l;

// assign statements (if any)                          
my3_8code i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.l(l)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
 a = 0;
b = 0;
c = 0; 
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#100 a = 1; b = 0; c = 0;               
#100 a = 0; b = 1; c = 0;                   
#100 a = 1; b = 1; c = 0;                   
#100 a = 0; b = 0; c = 1;                   
#100 a = 1; b = 0; c = 1;                   
#100 a = 0; b = 1; c = 1;                   
#100 a = 1; b = 1; c = 1;                   
#100 a = 0; b = 0; c = 0;                                                           
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

